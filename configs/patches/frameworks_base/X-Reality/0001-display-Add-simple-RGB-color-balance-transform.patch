From e5e6eea4d2c7cf9f77e1e7d41533f5affec82ddf Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Thu, 8 Jul 2021 03:34:50 -0700
Subject: [PATCH 1/2] display: Add simple RGB color balance transform

This adds support for adjusting the display's RGB color balance
globally via ColorDisplayManager. This is implemented as a simple
color transformation matrix that scales each channel.

The effect is similar to LineageOS' LiveDisplay feature, but being a
native color transform, it doesn't require changes to native code,
SELinux policies, or custom HALs.

Change-Id: Ia7ce363e3042ecfae438e452dbf155811a6bedeb
---
 .../hardware/display/ColorDisplayManager.java | 40 +++++++++
 .../display/IColorDisplayManager.aidl         |  3 +
 core/java/android/provider/Settings.java      | 18 ++++
 .../color/ColorBalanceTintController.java     | 85 +++++++++++++++++++
 .../display/color/ColorDisplayService.java    | 61 +++++++++++++
 .../color/DisplayTransformManager.java        |  4 +
 6 files changed, 211 insertions(+)
 create mode 100644 services/core/java/com/android/server/display/color/ColorBalanceTintController.java

diff --git a/core/java/android/hardware/display/ColorDisplayManager.java b/core/java/android/hardware/display/ColorDisplayManager.java
index f927b8b5..fc494e69 100644
--- a/core/java/android/hardware/display/ColorDisplayManager.java
+++ b/core/java/android/hardware/display/ColorDisplayManager.java
@@ -421,6 +421,30 @@ public final class ColorDisplayManager {
         return mManager.setAppSaturationLevel(packageName, saturationLevel);
     }
 
+    /**
+     * Set the global color balance for a specific RGB channel.
+     *
+     * @param channel RGB (0,1,2) channel to change
+     * @param value 0-255 (inclusive), where 255 is default balance
+     * @return whether the change was successful
+     * @hide
+     */
+    @RequiresPermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+    public boolean setColorBalanceChannel(int channel, int value) {
+        return mManager.setColorBalanceChannel(channel, value);
+    }
+
+    /**
+     * Get the current global color balance for a specific RGB channel.
+     *
+     * @param channel RGB (0,1,2) channel to get the balance of
+     * @return weight of the channel, 0-255 (inclusive) where 255 is the default
+     * @hide
+     */
+    public int getColorBalanceChannel(int channel) {
+        return mManager.getColorBalanceChannel(channel);
+    }
+
     /**
      * Enables or disables display white balance.
      *
@@ -745,6 +769,22 @@ public final class ColorDisplayManager {
             }
         }
 
+        boolean setColorBalanceChannel(int channel, int value) {
+            try {
+                return mCdm.setColorBalanceChannel(channel, value);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+
+        int getColorBalanceChannel(int channel) {
+            try {
+                return mCdm.getColorBalanceChannel(channel);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+
         boolean isDisplayWhiteBalanceEnabled() {
             try {
                 return mCdm.isDisplayWhiteBalanceEnabled();
diff --git a/core/java/android/hardware/display/IColorDisplayManager.aidl b/core/java/android/hardware/display/IColorDisplayManager.aidl
index 77dfb477..12ec42e9 100644
--- a/core/java/android/hardware/display/IColorDisplayManager.aidl
+++ b/core/java/android/hardware/display/IColorDisplayManager.aidl
@@ -53,6 +53,9 @@ interface IColorDisplayManager {
     @EnforcePermission("CONTROL_DISPLAY_COLOR_TRANSFORMS")
     void setColorMode(int colorMode);
 
+    int getColorBalanceChannel(int channel);
+    boolean setColorBalanceChannel(int channel, int value);
+
     boolean isDisplayWhiteBalanceEnabled();
     @EnforcePermission("CONTROL_DISPLAY_COLOR_TRANSFORMS")
     boolean setDisplayWhiteBalanceEnabled(boolean enabled);
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 144556e2..b5403e6c 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -11892,6 +11892,24 @@ public final class Settings {
         public static final String NIGHT_DISPLAY_LAST_ACTIVATED_TIME =
                 "night_display_last_activated_time";
 
+        /**
+         * Display color balance for the red channel, from 0 to 255.
+         * @hide
+         */
+        public static final String DISPLAY_COLOR_BALANCE_RED = "display_color_balance_red";
+
+        /**
+         * Display color balance for the green channel, from 0 to 255.
+         * @hide
+         */
+        public static final String DISPLAY_COLOR_BALANCE_GREEN = "display_color_balance_green";
+
+        /**
+         * Display color balance for the blue channel, from 0 to 255.
+         * @hide
+         */
+        public static final String DISPLAY_COLOR_BALANCE_BLUE = "display_color_balance_blue";
+
         /**
          * Control whether display white balance is currently enabled.
          * @hide
diff --git a/services/core/java/com/android/server/display/color/ColorBalanceTintController.java b/services/core/java/com/android/server/display/color/ColorBalanceTintController.java
new file mode 100644
index 00000000..0c2db0cb
--- /dev/null
+++ b/services/core/java/com/android/server/display/color/ColorBalanceTintController.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.display.color;
+
+import static com.android.server.display.color.DisplayTransformManager.LEVEL_COLOR_MATRIX_COLOR_BALANCE;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.hardware.display.ColorDisplayManager;
+import android.opengl.Matrix;
+import android.provider.Settings;
+
+import java.util.Arrays;
+
+/** Control the color transform for global color balance. */
+final class ColorBalanceTintController extends TintController {
+
+    private final float[] mMatrix = new float[16];
+
+    @Override
+    public void setUp(Context context, boolean needsLinear) {
+    }
+
+    @Override
+    public float[] getMatrix() {
+        return Arrays.copyOf(mMatrix, mMatrix.length);
+    }
+
+    @Override
+    public void setMatrix(int rgb) {
+        Matrix.setIdentityM(mMatrix, 0);
+        mMatrix[0] = ((float) Color.red(rgb)) / 255.0f;
+        mMatrix[5] = ((float) Color.green(rgb)) / 255.0f;
+        mMatrix[10] = ((float) Color.blue(rgb)) / 255.0f;
+    }
+
+    @Override
+    public int getLevel() {
+        return LEVEL_COLOR_MATRIX_COLOR_BALANCE;
+    }
+
+    @Override
+    public boolean isAvailable(Context context) {
+        return ColorDisplayManager.isColorTransformAccelerated(context);
+    }
+
+    public void updateBalance(Context context, int userId) {
+        int red = Settings.Secure.getIntForUser(context.getContentResolver(), channelToKey(0),
+                255, userId);
+        int green = Settings.Secure.getIntForUser(context.getContentResolver(), channelToKey(1),
+                255, userId);
+        int blue = Settings.Secure.getIntForUser(context.getContentResolver(), channelToKey(2),
+                255, userId);
+
+        int rgb = Color.rgb(red, green, blue);
+        setMatrix(rgb);
+    }
+
+    public static String channelToKey(int channel) {
+        switch (channel) {
+            case 0:
+                return Settings.Secure.DISPLAY_COLOR_BALANCE_RED;
+            case 1:
+                return Settings.Secure.DISPLAY_COLOR_BALANCE_GREEN;
+            case 2:
+                return Settings.Secure.DISPLAY_COLOR_BALANCE_BLUE;
+            default:
+                throw new IllegalArgumentException("Unknown channel: " + channel);
+        }
+    }
+}
diff --git a/services/core/java/com/android/server/display/color/ColorDisplayService.java b/services/core/java/com/android/server/display/color/ColorDisplayService.java
index a313bcf1..a08a10d9 100644
--- a/services/core/java/com/android/server/display/color/ColorDisplayService.java
+++ b/services/core/java/com/android/server/display/color/ColorDisplayService.java
@@ -116,6 +116,7 @@ public final class ColorDisplayService extends SystemService {
     private static final int MSG_APPLY_GLOBAL_SATURATION = 4;
     private static final int MSG_APPLY_DISPLAY_WHITE_BALANCE = 5;
     private static final int MSG_APPLY_REDUCE_BRIGHT_COLORS = 6;
+    private static final int MSG_APPLY_DISPLAY_COLOR_BALANCE = 7;
 
     /**
      * Return value if a setting has not been set.
@@ -157,6 +158,8 @@ public final class ColorDisplayService extends SystemService {
                     LocalServices.getService(DisplayManagerInternal.class), mDisplayManagerFlags);
     private final NightDisplayTintController mNightDisplayTintController =
             new NightDisplayTintController();
+    private final ColorBalanceTintController mColorBalanceTintController =
+            new ColorBalanceTintController();
     private final TintController mGlobalSaturationTintController =
             new GlobalSaturationTintController();
     private final ReduceBrightColorsTintController mReduceBrightColorsTintController =
@@ -356,6 +359,11 @@ public final class ColorDisplayService extends SystemService {
                             case Secure.ACCESSIBILITY_DISPLAY_DALTONIZER:
                                 onAccessibilityDaltonizerChanged();
                                 break;
+                            case Secure.DISPLAY_COLOR_BALANCE_RED:
+                            case Secure.DISPLAY_COLOR_BALANCE_BLUE:
+                            case Secure.DISPLAY_COLOR_BALANCE_GREEN:
+                                mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_COLOR_BALANCE);
+                                break;
                             case Secure.DISPLAY_WHITE_BALANCE_ENABLED:
                                 updateDisplayWhiteBalanceStatus();
                                 break;
@@ -392,6 +400,12 @@ public final class ColorDisplayService extends SystemService {
                 false /* notifyForDescendants */, mContentObserver, mCurrentUser);
         cr.registerContentObserver(Secure.getUriFor(Secure.ACCESSIBILITY_DISPLAY_DALTONIZER),
                 false /* notifyForDescendants */, mContentObserver, mCurrentUser);
+        cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_COLOR_BALANCE_RED),
+                false /* notifyForDescendants */, mContentObserver, mCurrentUser);
+        cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_COLOR_BALANCE_GREEN),
+                false /* notifyForDescendants */, mContentObserver, mCurrentUser);
+        cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_COLOR_BALANCE_BLUE),
+                false /* notifyForDescendants */, mContentObserver, mCurrentUser);
         cr.registerContentObserver(Secure.getUriFor(Secure.DISPLAY_WHITE_BALANCE_ENABLED),
                 false /* notifyForDescendants */, mContentObserver, mCurrentUser);
         cr.registerContentObserver(Secure.getUriFor(Secure.REDUCE_BRIGHT_COLORS_ACTIVATED),
@@ -445,6 +459,10 @@ public final class ColorDisplayService extends SystemService {
                 mHandler.sendEmptyMessage(MSG_APPLY_REDUCE_BRIGHT_COLORS);
             }
         }
+
+        if (mColorBalanceTintController.isAvailable(getContext())) {
+            mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_COLOR_BALANCE);
+        }
     }
 
     private void tearDown() {
@@ -1088,6 +1106,25 @@ public final class ColorDisplayService extends SystemService {
         return false;
     }
 
+    private boolean setColorBalanceChannelInternal(int channel, int value) {
+        if (mCurrentUser == UserHandle.USER_NULL) {
+            return false;
+        }
+
+        boolean putSuccess = Secure.putIntForUser(getContext().getContentResolver(),
+                ColorBalanceTintController.channelToKey(channel), value, mCurrentUser);
+        if (putSuccess) {
+            mHandler.sendEmptyMessage(MSG_APPLY_DISPLAY_COLOR_BALANCE);
+        }
+
+        return putSuccess;
+    }
+
+    private int getColorBalanceChannelInternal(int channel) {
+        return Secure.getIntForUser(getContext().getContentResolver(),
+                ColorBalanceTintController.channelToKey(channel), 255, mCurrentUser);
+    }
+
     private void dumpInternal(PrintWriter pw) {
         pw.println("COLOR DISPLAY MANAGER dumpsys (color_display)");
 
@@ -1693,6 +1730,10 @@ public final class ColorDisplayService extends SystemService {
                 case MSG_APPLY_DISPLAY_WHITE_BALANCE:
                     applyTintByCct(mDisplayWhiteBalanceTintController, false);
                     break;
+                case MSG_APPLY_DISPLAY_COLOR_BALANCE:
+                    mColorBalanceTintController.updateBalance(getContext(), mCurrentUser);
+                    applyTint(mColorBalanceTintController, true);
+                    break;
             }
         }
     }
@@ -1928,6 +1969,26 @@ public final class ColorDisplayService extends SystemService {
         }
 
         @android.annotation.EnforcePermission(android.Manifest.permission.CONTROL_DISPLAY_COLOR_TRANSFORMS)
+        @Override
+        public boolean setColorBalanceChannel(int channel, int value) {
+            final long token = Binder.clearCallingIdentity();
+            try {
+                return setColorBalanceChannelInternal(channel, value);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
+        }
+
+        @Override
+        public int getColorBalanceChannel(int channel) {
+            final long token = Binder.clearCallingIdentity();
+            try {
+                return getColorBalanceChannelInternal(channel);
+            } finally {
+                Binder.restoreCallingIdentity(token);
+            }
+        }
+
         @Override
         public boolean setDisplayWhiteBalanceEnabled(boolean enabled) {
             setDisplayWhiteBalanceEnabled_enforcePermission();
diff --git a/services/core/java/com/android/server/display/color/DisplayTransformManager.java b/services/core/java/com/android/server/display/color/DisplayTransformManager.java
index 0dba9e1b..112ee766 100644
--- a/services/core/java/com/android/server/display/color/DisplayTransformManager.java
+++ b/services/core/java/com/android/server/display/color/DisplayTransformManager.java
@@ -66,6 +66,10 @@ public class DisplayTransformManager {
      * Color transform level used by A11y services to invert the display colors.
      */
     public static final int LEVEL_COLOR_MATRIX_INVERT_COLOR = 300;
+    /**
+     * Color transform level used to adjust the color balance of the display.
+     */
+    public static final int LEVEL_COLOR_MATRIX_COLOR_BALANCE = 400;
 
     private static final int SURFACE_FLINGER_TRANSACTION_COLOR_MATRIX = 1015;
     private static final int SURFACE_FLINGER_TRANSACTION_DALTONIZER = 1014;
-- 
2.43.0

